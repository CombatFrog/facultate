     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  extern fopen
    11                                  extern fread
    12                                  extern printf
    13                                  extern fclose
    14                                  
    15                                  import fopen msvcrt.dll
    16                                  import fread msvcrt.dll
    17                                  import printf msvcrt.dll
    18                                  import fclose msvcrt.dll
    19                                  
    20                                  ; our data is declared here (the variables needed by our program)
    21                                  segment data use32 class=data
    22                                      ; ...
    23 00000000 6669736965722E7478-         numefisier db 'fisier.txt', 0
    23 00000009 7400               
    24 0000000B 7200                        modacces db 'r', 0
    25 0000000D 256400                      format db '%d', 0
    26 00000010 FFFFFFFF                    descriptor dd -1
    27                                      len equ 100
    28 00000014 00<rept>                    sir times len db 0
    29                                      
    30                                  ; our code starts here
    31                                  segment code use32 class=code
    32                                      start:
    33                                          ; ...
    34 00000000 68[0B000000]                    push dword modacces
    35 00000005 68[00000000]                    push dword numefisier
    36 0000000A FF15[00000000]                  call [fopen]
    37 00000010 83C408                          add esp, 4*2
    38 00000013 A3[10000000]                    mov [descriptor], eax
    39 00000018 83F800                          cmp eax, 0
    40 0000001B 745A                            je final
    41                                          
    42 0000001D FF35[10000000]                  push dword [descriptor]
    43 00000023 6A64                            push dword len
    44 00000025 6A01                            push dword 1
    45 00000027 68[14000000]                    push dword sir
    46 0000002C FF15[00000000]                  call [fread]
    47 00000032 83C410                          add esp, 4*4
    48                                          
    49 00000035 BE00000000                      mov esi, 0
    50 0000003A 89C1                            mov ecx, eax
    51                                          Repeta:
    52 0000003C 8A86[14000000]                      mov al, byte[sir+esi]
    53 00000042 3C20                                cmp al, ' '
    54 00000044 7410                                je finalRep
    55 00000046 2C30                                sub al, 48
    56 00000048 6698                                cbw
    57 0000004A B302                                mov bl, 2
    58 0000004C F6FB                                idiv bl
    59 0000004E 80FC00                              cmp ah, 0
    60 00000051 7402                                je par
    61 00000053 EB01                                jmp finalRep
    62                                              par:
    63 00000055 42                                      inc edx
    64                                              finalRep:    
    65 00000056 46                                      inc esi
    66 00000057 E2E3                            loop Repeta
    67                                          
    68 00000059 52                              push dword edx
    69 0000005A 68[0D000000]                    push dword format
    70 0000005F FF15[00000000]                  call [printf]
    71 00000065 83C408                          add esp, 4*2
    72                                          
    73 00000068 FF35[10000000]                  push dword [descriptor]
    74 0000006E FF15[00000000]                  call [fclose]
    75 00000074 83C404                          add esp, 4
    76                                          final:
    77                                          ; exit(0)
    78 00000077 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    79 00000079 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
